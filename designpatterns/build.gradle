//apply plugin: "kotlin2js"
apply plugin: 'kotlin-kapt'
apply plugin: 'info.solidsoft.pitest'
apply from: rootProject.file("gradle/jacoco/jacoco-simple.gradle")
apply from: rootProject.file("gradle/code_quality/detekt.gradle")

dependencies {

    kapt "com.google.dagger:dagger-compiler:2.23.2"

//     implementation fileTree(dir: 'libs', include: ['*.jar'])
    // testCompile test_implement.junit
    testImplementation test_implement["junit:junit"]
    // https://docs.gradle.org/4.6/release-notes.html
    testRuntimeOnly test_implement["org.junit.vintage:junit-vintage-engine"]
    // https://kotest.io/docs/quickstart
    // https://github.com/kotest/kotest-intellij-plugin
    testImplementation test_implement["io.kotest:kotest-runner-junit5"]
    testImplementation test_implement["io.kotest:kotest-runner-junit5-jvm"]
    // Pitest https://kotest.io/docs/framework/plugins.html
    testImplementation test_implement["io.kotest:kotest-plugins-pitest"]
    // assertions library kotest
    testImplementation test_implement["io.kotest:kotest-assertions-core"]
    // property testing
    testImplementation test_implement["io.kotest:kotest-property"]

    // https://www.spekframework.org/setup-jvm/
//    testImplementation test_implement["org.jetbrains.spek:spek-api"]
//    testImplementation test_implement["org.spekframework.spek2:spek-dsl-jvm"]
//    testRuntimeOnly test_implement["org.spekframework.spek2:spek-runner-junit5"]
    // spek requires kotlin-reflect, can be omitted if already in the classpath
//    testRuntimeOnly test_implement.org_jetbrains_kotlin_kotlin_reflect

    // compile base_depend.commons_cli
    implementation base_depend["commons-codec:commons-codec"]
    implementation base_depend["org.json:json"]
    implementation base_depend["com.github.javafaker:javafaker"]
//    compileOnly base_depend["commons-cli:commons-cli"]
//    implementation kotlin_depend["org.jetbrains.kotlin:kotlin-stdlib-jdk8"]
}


// setup the test task
test {
    testLogging {
        exceptionFormat = 'full'
        events "PASSED", "FAILED", "SKIPPED"
    }
    useJUnitPlatform {
//        includeEngines "spek2"
    }
    jacoco {
//        enabled = false
    }
}

pitest {
    testPlugin = "Kotest"
    targetClasses = [
            'com.sinlov.kotlin.design.patterns.*',
    ]
    threads = Runtime.getRuntime().availableProcessors()
    outputFormats = ['XML', 'HTML']
    avoidCallsTo = ["kotlin.jvm.internal", "kotlinx.coroutines"]
}